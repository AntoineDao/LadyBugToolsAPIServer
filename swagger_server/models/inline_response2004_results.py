# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.uuid_schema import UuidSchema  # noqa: F401,E501
from swagger_server import util


class InlineResponse2004Results(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, uuid: UuidSchema=None):  # noqa: E501
        """InlineResponse2004Results - a model defined in Swagger

        :param type: The type of this InlineResponse2004Results.  # noqa: E501
        :type type: str
        :param uuid: The uuid of this InlineResponse2004Results.  # noqa: E501
        :type uuid: UuidSchema
        """
        self.swagger_types = {
            'type': str,
            'uuid': UuidSchema
        }

        self.attribute_map = {
            'type': 'type',
            'uuid': 'uuid'
        }

        self._type = type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2004Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_4_results of this InlineResponse2004Results.  # noqa: E501
        :rtype: InlineResponse2004Results
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this InlineResponse2004Results.

        The type of material  # noqa: E501

        :return: The type of this InlineResponse2004Results.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this InlineResponse2004Results.

        The type of material  # noqa: E501

        :param type: The type of this InlineResponse2004Results.
        :type type: str
        """
        allowed_values = ["bsdf", "light_source", "opaque", "translucent"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self) -> UuidSchema:
        """Gets the uuid of this InlineResponse2004Results.


        :return: The uuid of this InlineResponse2004Results.
        :rtype: UuidSchema
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: UuidSchema):
        """Sets the uuid of this InlineResponse2004Results.


        :param uuid: The uuid of this InlineResponse2004Results.
        :type uuid: UuidSchema
        """

        self._uuid = uuid
