# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MaterialSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, material: object=None):  # noqa: E501
        """MaterialSchema - a model defined in Swagger

        :param type: The type of this MaterialSchema.  # noqa: E501
        :type type: str
        :param material: The material of this MaterialSchema.  # noqa: E501
        :type material: object
        """
        self.swagger_types = {
            'type': str,
            'material': object
        }

        self.attribute_map = {
            'type': 'type',
            'material': 'material'
        }

        self._type = type
        self._material = material

    @classmethod
    def from_dict(cls, dikt) -> 'MaterialSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MaterialSchema of this MaterialSchema.  # noqa: E501
        :rtype: MaterialSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this MaterialSchema.

        The type of material  # noqa: E501

        :return: The type of this MaterialSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MaterialSchema.

        The type of material  # noqa: E501

        :param type: The type of this MaterialSchema.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def material(self) -> object:
        """Gets the material of this MaterialSchema.


        :return: The material of this MaterialSchema.
        :rtype: object
        """
        return self._material

    @material.setter
    def material(self, material: object):
        """Sets the material of this MaterialSchema.


        :param material: The material of this MaterialSchema.
        :type material: object
        """
        if material is None:
            raise ValueError("Invalid value for `material`, must not be `None`")  # noqa: E501

        self._material = material
